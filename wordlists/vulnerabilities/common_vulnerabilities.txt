# Common Vulnerabilities and Security Issues
# Format: category,vulnerability,description,severity,cwe,remediation

# Web Application Vulnerabilities
Injection,SQL Injection,Attacker can insert malicious SQL code that can read sensitive data modify database data or delete data,High,CWE-89,Use parameterized queries prepared statements or stored procedures. Validate and sanitize all user inputs. Implement least privilege database accounts.
Injection,Command Injection,Attacker can execute arbitrary system commands on the host operating system,Critical,CWE-77,Avoid using system commands with user-supplied input. If necessary implement strict input validation and use allowlists for permitted values.
Injection,LDAP Injection,Attacker can manipulate LDAP queries to bypass authentication or access unauthorized data,High,CWE-90,Use LDAP-specific encoding functions. Implement proper input validation and sanitization. Use parameterized LDAP queries if available.
Injection,XPath Injection,Attacker can modify XPath queries to bypass authentication or access unauthorized data in XML documents,High,CWE-91,Use parameterized XPath queries. Implement proper input validation and sanitization. Consider using precompiled XPath queries.
Injection,NoSQL Injection,Attacker can manipulate NoSQL database queries to bypass authentication or access unauthorized data,High,CWE-943,Use parameterized queries. Validate and sanitize all user inputs. Implement proper data type validation.
Injection,XML Injection,Attacker can inject malicious XML content to manipulate application logic or access sensitive data,High,CWE-91,Validate and sanitize XML input. Use XML schema validation. Disable XML external entity processing.
Injection,SMTP Injection,Attacker can inject SMTP commands to manipulate email functionality,Medium,CWE-93,Validate and sanitize all user inputs used in email headers and content. Use email libraries that handle proper escaping.
Injection,CRLF Injection,Attacker can inject carriage return and line feed characters to manipulate HTTP responses or log files,Medium,CWE-93,Validate and sanitize all user inputs. Encode CRLF sequences before including user input in HTTP headers or log files.
Injection,Template Injection,Attacker can inject template directives that can result in remote code execution,High,CWE-94,Sanitize user input before passing to template engines. Use a sandboxed template environment. Consider using logic-less templates.
Injection,HTML Injection,Attacker can inject HTML code to modify page content,Medium,CWE-79,Encode HTML special characters. Implement Content Security Policy (CSP). Use template systems that automatically escape output.
Injection,CSS Injection,Attacker can inject malicious CSS to steal data or modify page appearance,Medium,CWE-79,Validate and sanitize CSS input. Implement Content Security Policy (CSP). Use allowlists for CSS properties.
Injection,OGNL Injection,Attacker can inject Object-Graph Navigation Language expressions to execute code (common in Java applications),High,CWE-917,Validate and sanitize all user inputs. Implement strict allowlists for OGNL expressions. Keep frameworks updated.
Injection,Expression Language Injection,Attacker can inject expression language code to execute arbitrary code or access sensitive data,High,CWE-917,Validate and sanitize all user inputs. Disable expression language evaluation for user-controlled data. Implement proper access controls.
Injection,Format String Injection,Attacker can manipulate format strings to crash applications or execute code,High,CWE-134,Avoid using user-supplied input in format strings. Use format string functions that don't interpret format specifiers.
Injection,Log Injection,Attacker can inject malicious content into log files potentially leading to log forging,Medium,CWE-117,Encode or escape user-controlled data before logging. Implement proper log viewing tools that handle special characters.
Injection,Host Header Injection,Attacker can manipulate the Host header to poison caches reset passwords or bypass authentication,Medium,CWE-640,Validate the Host header against a allowlist of expected values. Don't trust the Host header for security-critical functions.
Injection,HTTP Parameter Pollution,Attacker can inject additional parameters to manipulate application behavior,Medium,CWE-20,Implement proper server-side parameter parsing. Validate parameter names and values. Use frameworks that handle parameter parsing securely.
Injection,HTTP Header Injection,Attacker can inject malicious HTTP headers to manipulate responses or trigger other vulnerabilities,Medium,CWE-113,Validate and sanitize all user inputs used in HTTP headers. Use framework functions for setting headers that handle escaping.
Injection,IMAP/SMTP Injection,Attacker can inject commands into mail protocols to manipulate email functionality,Medium,CWE-93,Validate and sanitize all user inputs used in mail commands. Use mail libraries that handle proper escaping.
Injection,XXE (XML External Entity),Attacker can include external entities to disclose local files perform SSRF or cause DoS,High,CWE-611,Disable DTD processing. Disable external entity resolution. Use less complex data formats like JSON when possible.

Broken Authentication,Weak Passwords,System allows passwords that are easily guessable or brute-forceable,High,CWE-521,Implement strong password policies. Enforce minimum length complexity and rotation. Consider password strength meters.
Broken Authentication,Brute Force Vulnerability,System does not limit authentication attempts allowing attackers to guess credentials,High,CWE-307,Implement account lockout after failed attempts. Use CAPTCHA or increasing delays. Alert on multiple failed login attempts.
Broken Authentication,Credential Stuffing,Attackers use leaked username/password pairs from other breaches,High,CWE-798,Implement multi-factor authentication. Check passwords against known breached password lists. Monitor for unusual login patterns.
Broken Authentication,Session Fixation,Attacker can hijack user sessions by fixing session identifiers,High,CWE-384,Generate new session IDs after authentication. Invalidate existing session IDs during login. Implement proper session management.
Broken Authentication,Insufficient Session Expiration,Sessions remain valid for excessive periods of time,Medium,CWE-613,Implement proper session timeout. Provide logout functionality. Invalidate sessions on the server after logout.
Broken Authentication,Missing Multi-factor Authentication,System relies solely on single-factor authentication,Medium,CWE-308,Implement multi-factor authentication especially for sensitive functions or privileged accounts. Provide recovery options.
Broken Authentication,Insecure Password Storage,Passwords are stored in plaintext or with weak hashing algorithms,Critical,CWE-256,Use strong adaptive hashing algorithms (bcrypt Argon2 PBKDF2). Add unique salts to each password. Never store plaintext passwords.
Broken Authentication,Insecure Password Recovery,Password recovery mechanisms can be exploited to gain unauthorized access,High,CWE-640,Implement secure password recovery with time-limited tokens. Use out-of-band verification. Log and alert on password resets.
Broken Authentication,Remember Me Functionality Insecurity,"Remember Me" feature implemented insecurely allowing session hijacking,Medium,CWE-539,Use secure persistent cookies with proper expiration. Consider requiring re-authentication for sensitive actions.
Broken Authentication,Default Credentials,System uses default vendor credentials that are publicly known,Critical,CWE-798,Change all default credentials during installation. Implement forced password change on first login. Regularly audit for default credentials.
Broken Authentication,Plain Text Credentials Transmission,Credentials are transmitted in plain text without encryption,Critical,CWE-319,Use HTTPS for all authentication. Never transmit credentials in URLs. Implement proper transport layer security.
Broken Authentication,Insecure JWT Handling,JSON Web Tokens are improperly validated or use weak algorithms,High,CWE-347,Use strong signing algorithms. Validate all JWT components. Implement proper key management. Set appropriate expiration times.
Broken Authentication,Cross-Site Request Forgery (CSRF),Attacker can trick users into performing unwanted actions while authenticated,High,CWE-352,Implement anti-CSRF tokens. Use SameSite cookie attribute. Verify the Origin/Referer header for sensitive actions.

Sensitive Data Exposure,Cleartext Transmission of Sensitive Data,Sensitive data is transmitted without encryption,High,CWE-319,Use HTTPS for all communications. Implement proper TLS configuration. Consider using HTTP Strict Transport Security (HSTS).
Sensitive Data Exposure,Inadequate Encryption,Weak encryption algorithms or improper key management is used,High,CWE-327,Use strong industry-standard encryption algorithms. Implement proper key management. Regularly rotate encryption keys.
Sensitive Data Exposure,Insecure Direct Object References,Attackers can access unauthorized resources by manipulating references,High,CWE-639,Implement proper access controls. Use indirect reference maps. Validate user permissions for each resource access.
Sensitive Data Exposure,Information Leakage in Error Messages,Detailed error messages reveal sensitive implementation details,Medium,CWE-209,Implement custom error handling. Display generic error messages to users. Log detailed errors server-side only.
Sensitive Data Exposure,Directory Listing Enabled,Server directories are browsable exposing file structure,Medium,CWE-548,Disable directory listing in web server configuration. Implement proper access controls for file resources.
Sensitive Data Exposure,Caching of Sensitive Data,Sensitive data is cached in browsers or intermediate proxies,Medium,CWE-524,Set appropriate cache-control headers. Use HTTPS to prevent proxy caching. Mark sensitive pages as no-store no-cache.
Sensitive Data Exposure,Insufficient Transport Layer Protection,Weak SSL/TLS configuration allowing downgrade attacks or interception,High,CWE-295,Implement proper TLS configuration. Disable weak protocols and ciphers. Use HTTP Strict Transport Security (HSTS).
Sensitive Data Exposure,Leakage in HTTP Headers,HTTP headers reveal sensitive information about the application,Low,CWE-200,Configure servers to limit information in HTTP headers. Remove or customize Server X-Powered-By and similar headers.
Sensitive Data Exposure,Sensitive Data in URLs,Sensitive data is included in URLs which may be logged or bookmarked,Medium,CWE-598,Use POST requests for sensitive operations. Never include sensitive data in URLs. Implement proper session management.
Sensitive Data Exposure,Insufficient PII Protection,Personally Identifiable Information is not adequately protected,High,CWE-359,Encrypt PII data at rest. Implement proper access controls. Consider data minimization principles.
Sensitive Data Exposure,Hardcoded Secrets,Credentials API keys or other secrets are hardcoded in application code,Critical,CWE-798,Use environment variables or secure configuration management. Implement proper secrets management. Regularly rotate secrets.
Sensitive Data Exposure,Insecure Deserialization,Untrusted data is deserialized without proper validation,Critical,CWE-502,Implement integrity checks on serialized data. Use safer data formats. Consider using serialization frameworks with security features.

XSS,Reflected XSS,Malicious scripts are reflected off a web server and executed in victim's browser,High,CWE-79,Implement proper output encoding. Validate and sanitize all user inputs. Implement Content Security Policy (CSP).
XSS,Stored XSS,Malicious scripts are stored on the server and executed when users access the affected page,Critical,CWE-79,Implement proper output encoding. Validate and sanitize all user inputs. Implement Content Security Policy (CSP).
XSS,DOM-based XSS,Client-side JavaScript manipulates the DOM in an unsafe way based on untrusted data,High,CWE-79,Use safe JavaScript methods. Sanitize data before using it in DOM manipulation. Implement Content Security Policy (CSP).
XSS,Universal XSS (UXSS),Browser vulnerabilities allow bypassing same-origin policy,Critical,CWE-692,Keep browsers updated. Implement proper Content Security Policy (CSP). Use framework security features.
XSS,Blind XSS,XSS payload is executed in areas not directly visible to the attacker (admin panels logs),High,CWE-79,Implement proper output encoding in all application areas including admin interfaces and logs. Use Content Security Policy (CSP).

Broken Access Control,Insecure Direct Object References,Attackers can access unauthorized resources by manipulating references,High,CWE-639,Implement proper access controls. Use indirect reference maps. Validate user permissions for each resource access.
Broken Access Control,Missing Function Level Access Control,Application does not restrict access to functions based on user roles,High,CWE-285,Implement proper authorization checks for all functions. Use role-based access control. Deny access by default.
Broken Access Control,Privilege Escalation,Users can elevate their privileges to gain unauthorized access,Critical,CWE-269,Implement proper access controls. Validate permissions for all actions. Log and alert on privilege changes.
Broken Access Control,Horizontal Privilege Escalation,Users can access resources belonging to other users of the same privilege level,High,CWE-639,Implement proper access controls. Validate that users can only access their own resources. Use indirect references.
Broken Access Control,Vertical Privilege Escalation,Users can access functions or data restricted to higher privilege levels,Critical,CWE-269,Implement proper role-based access controls. Validate permissions for all actions. Log and alert on suspicious activities.
Broken Access Control,JWT Token Weaknesses,JSON Web Tokens are improperly validated allowing manipulation of claims,High,CWE-347,Validate all JWT components. Use strong signing algorithms. Implement proper key management. Set appropriate expiration times.
Broken Access Control,CORS Misconfiguration,Cross-Origin Resource Sharing is configured to allow unauthorized access,Medium,CWE-942,Configure CORS headers properly. Restrict allowed origins. Validate the Origin header server-side.
Broken Access Control,Missing Rate Limiting,Application does not limit the number of operations a user can perform,Medium,CWE-770,Implement rate limiting for all API endpoints. Consider using token bucket or leaky bucket algorithms. Log and alert on threshold violations.
Broken Access Control,Insecure File Uploads,Application allows uploading of dangerous file types,High,CWE-434,Validate file types extensions and content. Store uploaded files outside the web root. Scan files for malware.
Broken Access Control,Path Traversal,Attackers can access files outside intended directory using ../ sequences,High,CWE-22,Validate and sanitize file paths. Use indirect references to files. Implement proper access controls for file resources.
Broken Access Control,Open Redirects,Application redirects to untrusted destinations based on unvalidated input,Medium,CWE-601,Validate all redirect destinations against an allowlist. Use indirect references for redirects. Implement proper redirect handling.

Security Misconfiguration,Default Credentials,System uses default vendor credentials that are publicly known,Critical,CWE-798,Change all default credentials during installation. Implement forced password change on first login. Regularly audit for default credentials.
Security Misconfiguration,Unnecessary Services Enabled,Unnecessary services or features are enabled increasing attack surface,Medium,CWE-1059,Disable unnecessary services features and ports. Implement the principle of least functionality. Regularly audit enabled services.
Security Misconfiguration,Missing Security Headers,Application does not implement security-related HTTP headers,Medium,CWE-693,Implement security headers like Content-Security-Policy X-Content-Type-Options X-Frame-Options etc. Regularly test header configuration.
Security Misconfiguration,Error Handling Reveals Sensitive Information,Detailed error messages reveal sensitive implementation details,Medium,CWE-209,Implement custom error handling. Display generic error messages to users. Log detailed errors server-side only.
Security Misconfiguration,Cross-Origin Resource Sharing Misconfiguration,CORS is configured too permissively,Medium,CWE-942,Configure CORS headers properly. Restrict allowed origins. Validate the Origin header server-side.
Security Misconfiguration,Outdated Software,Application uses outdated components with known vulnerabilities,High,CWE-1104,Implement a patch management process. Regularly update all software components. Monitor security advisories.
Security Misconfiguration,Insecure SSL/TLS Configuration,Weak SSL/TLS configuration allowing downgrade attacks or interception,High,CWE-295,Implement proper TLS configuration. Disable weak protocols and ciphers. Use HTTP Strict Transport Security (HSTS).
Security Misconfiguration,Directory Listing Enabled,Server directories are browsable exposing file structure,Medium,CWE-548,Disable directory listing in web server configuration. Implement proper access controls for file resources.
Security Misconfiguration,Unnecessary Features Enabled,Unnecessary application features are enabled increasing attack surface,Medium,CWE-1059,Disable unnecessary features and modules. Implement the principle of least functionality. Regularly audit enabled features.
Security Misconfiguration,Default Application Configuration,Application uses insecure default configuration settings,High,CWE-1188,Review and harden all default configurations. Implement secure-by-default settings. Regularly audit configuration.

# Network Security Vulnerabilities
Network,Open Ports,Unnecessary open ports increasing attack surface,Medium,CWE-1059,Close unnecessary ports. Implement proper firewall rules. Regularly audit open ports.
Network,Weak Encryption,Network traffic is encrypted with weak algorithms or protocols,High,CWE-327,Implement strong encryption for all network traffic. Disable weak protocols and ciphers. Regularly audit encryption configuration.
Network,Unencrypted Communications,Sensitive data is transmitted in cleartext,High,CWE-319,Encrypt all sensitive communications. Implement proper TLS configuration. Consider using VPNs for internal traffic.
Network,Insecure Network Services,Network services have vulnerabilities or are misconfigured,High,CWE-1059,Harden all network services. Disable unnecessary services. Regularly update and patch services.
Network,Man-in-the-Middle Vulnerability,Network traffic can be intercepted and potentially modified,High,CWE-300,Implement proper encryption and certificate validation. Use certificate pinning. Implement HSTS for web applications.
Network,DNS Cache Poisoning,DNS resolvers can be tricked into caching false information,Medium,CWE-350,Implement DNSSEC. Use DNS over HTTPS or DNS over TLS. Regularly update DNS software.
Network,ARP Spoofing,Attackers can intercept network traffic by spoofing ARP messages,Medium,CWE-300,Implement static ARP entries for critical systems. Use VLANs to segment networks. Consider using ARP spoofing detection tools.
Network,VLAN Hopping,Attackers can bypass VLAN segmentation,Medium,CWE-668,Properly configure switch ports. Disable unused ports. Implement proper VLAN configuration and security measures.
Network,SNMP Vulnerabilities,SNMP services are misconfigured or use weak community strings,Medium,CWE-798,Use SNMPv3 with proper authentication and encryption. Restrict SNMP access with ACLs. Change default community strings.
Network,BGP Vulnerabilities,Border Gateway Protocol is misconfigured allowing route hijacking,High,CWE-668,Implement BGP security measures like RPKI and route filtering. Monitor for suspicious routing changes.
Network,Wireless Network Vulnerabilities,Wireless networks use weak encryption or authentication,High,CWE-326,Use WPA3 or strong WPA2 configuration. Implement proper authentication. Regularly audit wireless security.
Network,Rogue Access Points,Unauthorized wireless access points connected to the network,Medium,CWE-668,Implement wireless intrusion detection. Regularly scan for unauthorized access points. Implement 802.1X authentication.
Network,Rogue DHCP Servers,Unauthorized DHCP servers can provide false network configuration,Medium,CWE-668,Implement DHCP snooping on switches. Monitor for unauthorized DHCP servers. Consider using static IP addresses for critical systems.
Network,IP Spoofing,Attackers can forge source IP addresses to bypass filtering or impersonate trusted hosts,Medium,CWE-290,Implement ingress and egress filtering. Use authentication mechanisms that don't rely solely on IP addresses.
Network,TCP/IP Stack Vulnerabilities,Vulnerabilities in the TCP/IP implementation allowing various attacks,High,CWE-1059,Keep operating systems and network stacks updated. Implement proper network segmentation. Use host-based firewalls.
Network,Firewall Bypass,Attackers can bypass firewall restrictions,High,CWE-668,Implement defense in depth. Regularly audit firewall rules. Use application-layer firewalls in addition to network firewalls.
Network,Insecure Remote Access,Remote access services are misconfigured or use weak authentication,High,CWE-306,Implement strong authentication for all remote access. Use VPNs with proper encryption. Limit remote access to necessary users only.
Network,Denial of Service Vulnerability,Systems are vulnerable to resource exhaustion attacks,Medium,CWE-400,Implement rate limiting and traffic filtering. Use DDoS protection services. Design systems for resilience.
Network,SSRF (Server-Side Request Forgery),Attackers can make the server perform unintended network requests,High,CWE-918,Validate and sanitize all user-supplied URLs. Implement allowlists for permitted destinations. Use network segmentation.

# Operating System Vulnerabilities
Operating System,Missing Patches,Operating system is missing security patches for known vulnerabilities,High,CWE-1104,Implement a patch management process. Regularly update operating systems. Monitor security advisories.
Operating System,Privilege Escalation,Local users can elevate privileges to gain unauthorized access,Critical,CWE-269,Apply security patches promptly. Implement principle of least privilege. Use privilege separation.
Operating System,Default Credentials,System uses default accounts and passwords,Critical,CWE-798,Change all default credentials. Disable or remove unnecessary default accounts. Regularly audit for default credentials.
Operating System,Unnecessary Services,Unnecessary services are running increasing attack surface,Medium,CWE-1059,Disable unnecessary services. Implement proper service hardening. Regularly audit running services.
Operating System,Weak File Permissions,Critical files have overly permissive access controls,High,CWE-732,Implement proper file permissions following principle of least privilege. Regularly audit file permissions.
Operating System,Insecure Boot Configuration,Boot process is not secured allowing tampering,High,CWE-1191,Implement secure boot. Use disk encryption. Configure proper boot loader security.
Operating System,Unprotected Storage Media,Storage media is not encrypted allowing data theft,High,CWE-311,Implement full disk encryption. Use hardware security modules for key storage. Implement proper key management.
Operating System,Audit Logging Disabled,System auditing is disabled or insufficient,Medium,CWE-778,Enable comprehensive audit logging. Configure log retention policies. Implement log monitoring and alerting.
Operating System,Weak Password Policy,System allows weak passwords or has no password complexity requirements,High,CWE-521,Implement strong password policies. Use multi-factor authentication where possible. Regularly audit password compliance.
Operating System,Unpatched Kernel Vulnerabilities,Kernel has known vulnerabilities that are not patched,Critical,CWE-1104,Implement a patch management process. Regularly update kernel. Monitor security advisories.
Operating System,Insecure Remote Management,Remote management interfaces are insecure or misconfigured,High,CWE-306,Secure all remote management interfaces. Use encryption and strong authentication. Limit access to necessary users only.
Operating System,Unrestricted File Upload,System allows uploading of dangerous file types,High,CWE-434,Validate file types extensions and content. Implement proper access controls for uploaded files. Scan files for malware.
Operating System,Insecure Temporary File Handling,Temporary files are created with predictable names or insecure permissions,Medium,CWE-377,Use secure methods for creating temporary files. Implement proper file permissions. Clean up temporary files when no longer needed.

# Mobile Application Vulnerabilities
Mobile,Insecure Data Storage,Sensitive data is stored insecurely on the device,High,CWE-312,Use secure storage APIs. Encrypt sensitive data. Avoid storing sensitive data when possible.
Mobile,Insecure Communication,Data is transmitted without proper encryption,High,CWE-319,Use TLS for all communications. Implement certificate pinning. Validate server certificates properly.
Mobile,Insufficient Transport Layer Protection,Weak SSL/TLS implementation vulnerable to interception,High,CWE-295,Implement proper TLS configuration. Use certificate pinning. Validate server certificates properly.
Mobile,Weak Server-Side Controls,Backend services lack proper security controls,High,CWE-284,Implement proper authentication and authorization on the server side. Don't rely on client-side controls.
Mobile,Improper Platform Usage,Application does not follow platform security best practices,Medium,CWE-1173,Follow platform-specific security guidelines. Use platform security features. Keep up with platform security updates.
Mobile,Insecure Authentication,Weak or missing authentication mechanisms,High,CWE-287,Implement strong authentication. Consider biometric or multi-factor authentication. Secure session management.
Mobile,Client-Side Injection,Application is vulnerable to injection attacks on the client side,Medium,CWE-79,Validate and sanitize all inputs. Use safe APIs for data handling. Implement proper content security.
Mobile,Lack of Binary Protections,Application binary is not protected against reverse engineering or tampering,Medium,CWE-494,Implement code obfuscation. Use anti-tampering techniques. Consider using app shielding solutions.
Mobile,Insecure IPC (Inter-Process Communication),IPC mechanisms are insecurely implemented,Medium,CWE-927,Validate all IPC inputs. Implement proper access controls for IPC. Use platform security features for IPC.
Mobile,Sensitive Data in Logs,Application logs contain sensitive information,Medium,CWE-532,Avoid logging sensitive data. Implement proper log levels. Configure logging frameworks securely.
Mobile,Hardcoded Credentials,Application contains hardcoded API keys passwords or other secrets,Critical,CWE-798,Store secrets securely. Use secure storage APIs. Consider using a remote configuration service.
Mobile,Insecure WebView Implementation,WebViews are configured insecurely allowing JavaScript injection or other attacks,High,CWE-749,Configure WebViews securely. Disable JavaScript if not needed. Validate all loaded content.
Mobile,Weak Cryptography,Application uses weak cryptographic algorithms or implementations,High,CWE-327,Use strong industry-standard cryptographic algorithms. Use platform cryptography APIs. Keep cryptographic libraries updated.
Mobile,Insecure Random Number Generation,Application uses predictable random numbers for security functions,Medium,CWE-330,Use cryptographically secure random number generators. Use platform APIs for random number generation.
Mobile,Excessive Permissions,Application requests unnecessary permissions,Medium,CWE-272,Request only necessary permissions. Explain permission usage to users. Consider runtime permissions model.

# API Security Vulnerabilities
API,Broken Object Level Authorization,APIs don't properly check if the user has access to the requested object,High,CWE-639,Implement proper authorization checks for all API endpoints. Use indirect object references. Log and monitor access attempts.
API,Broken Authentication,Authentication mechanisms are implemented incorrectly,High,CWE-287,Implement proper authentication for all API endpoints. Use secure token handling. Implement proper session management.
API,Excessive Data Exposure,APIs return more data than necessary,Medium,CWE-213,Return only necessary data. Implement proper data filtering. Consider using different response models for different use cases.
API,Lack of Resources & Rate Limiting,APIs don't limit the number or frequency of requests,Medium,CWE-770,Implement rate limiting for all API endpoints. Consider using token bucket or leaky bucket algorithms. Log and alert on threshold violations.
API,Broken Function Level Authorization,APIs don't properly check if the user has permission to use the requested function,High,CWE-285,Implement proper authorization checks for all API functions. Use role-based access control. Deny access by default.
API,Mass Assignment,APIs automatically bind client-provided data to internal objects without proper filtering,High,CWE-915,Implement allowlists for permitted properties. Use DTOs (Data Transfer Objects) to control data binding. Validate all inputs.
API,Security Misconfiguration,APIs have security misconfigurations like default credentials or unnecessary features,High,CWE-1059,Implement proper security hardening. Disable unnecessary features. Use security headers. Keep systems updated.
API,Injection,APIs are vulnerable to injection attacks like SQL injection or command injection,High,CWE-74,Use parameterized queries. Validate and sanitize all inputs. Use safe APIs for data handling.
API,Improper Assets Management,Old API versions are not properly deprecated or secured,Medium,CWE-1059,Implement proper API versioning. Secure or disable old API versions. Document API lifecycle.
API,Insufficient Logging & Monitoring,API activity is not properly logged or monitored for suspicious activity,Medium,CWE-778,Implement comprehensive logging for all API access. Monitor for suspicious patterns. Implement alerting for security events.
API,Lack of API Documentation,APIs are not properly documented leading to misuse,Low,CWE-1059,Provide comprehensive API documentation. Use standards like OpenAPI/Swagger. Document security requirements.
API,Insecure Direct Object References,APIs expose internal implementation details in references,High,CWE-639,Use indirect references. Implement proper access controls. Validate all object references.
API,Improper Error Handling,APIs return detailed error messages that reveal implementation details,Medium,CWE-209,Implement custom error handling. Return generic error messages. Log detailed errors server-side only.
API,Lack of TLS,APIs don't use encryption for data transmission,High,CWE-319,Implement TLS for all API communications. Use proper TLS configuration. Consider using HTTP Strict Transport Security (HSTS).
API,No Input Validation,APIs don't properly validate input data,High,CWE-20,Implement comprehensive input validation. Use schema validation. Validate data types lengths and formats.

# Cloud Security Vulnerabilities
Cloud,Insecure Cloud Storage,Cloud storage is misconfigured allowing unauthorized access,Critical,CWE-668,Implement proper access controls for cloud storage. Avoid public access unless necessary. Encrypt sensitive data.
Cloud,Excessive Permissions,Cloud resources have overly permissive access controls,High,CWE-732,Implement principle of least privilege. Regularly review and audit permissions. Use role-based access control.
Cloud,Insecure APIs,Cloud service APIs are insecurely implemented or misconfigured,High,CWE-1059,Secure all API endpoints. Implement proper authentication and authorization. Monitor API usage.
Cloud,Insufficient Identity and Access Management,Weak IAM configuration allowing unauthorized access,High,CWE-284,Implement proper IAM policies. Use multi-factor authentication. Regularly audit access controls.
Cloud,Lack of Encryption,Data is not encrypted at rest or in transit,High,CWE-311,Encrypt data at rest and in transit. Implement proper key management. Use cloud provider encryption features.
Cloud,Insecure Network Configuration,Network security groups or firewalls are misconfigured,High,CWE-1059,Implement proper network security controls. Restrict access to necessary sources only. Regularly audit network configuration.
Cloud,Insufficient Logging and Monitoring,Cloud activity is not properly logged or monitored,Medium,CWE-778,Enable comprehensive logging. Implement centralized log management. Set up alerts for suspicious activities.
Cloud,Insecure Serverless Functions,Serverless functions have vulnerabilities or excessive permissions,High,CWE-1059,Implement proper security controls for serverless functions. Follow the principle of least privilege. Validate all inputs.
Cloud,Insecure Containers,Container images or orchestration is insecurely configured,High,CWE-1059,Use secure base images. Scan containers for vulnerabilities. Implement proper container security controls.
Cloud,Misconfigured Databases,Cloud databases are misconfigured allowing unauthorized access,Critical,CWE-668,Implement proper access controls for databases. Avoid public access. Encrypt sensitive data. Use strong authentication.
Cloud,Insecure Secrets Management,API keys credentials or other secrets are not properly secured,Critical,CWE-798,Use cloud provider secrets management services. Rotate secrets regularly. Implement proper access controls for secrets.
Cloud,Lack of MFA,Multi-factor authentication is not enabled for cloud resources,High,CWE-308,Enable MFA for all user accounts especially for privileged accounts. Implement conditional access policies.
Cloud,Insecure Default Configurations,Cloud resources use insecure default configurations,High,CWE-1188,Review and harden all default configurations. Implement secure-by-default settings. Regularly audit configuration.
Cloud,Unpatched Systems,Cloud systems are not patched for known vulnerabilities,High,CWE-1104,Implement a patch management process. Use automated patching where possible. Monitor security advisories.
Cloud,Insecure Deployment Practices,Insecure CI/CD pipelines or deployment processes,Medium,CWE-1059,Implement secure CI/CD practices. Scan code and dependencies for vulnerabilities. Implement proper access controls for deployment.

# IoT Security Vulnerabilities
IoT,Insecure Web Interface,Web interfaces for IoT devices have security vulnerabilities,High,CWE-1059,Implement proper authentication and authorization. Keep web interfaces updated. Disable unnecessary features.
IoT,Insufficient Authentication,IoT devices use weak or no authentication,High,CWE-287,Implement strong authentication. Avoid default credentials. Consider using certificate-based authentication.
IoT,Insecure Network Services,Network services on IoT devices have vulnerabilities,High,CWE-1059,Disable unnecessary services. Keep services updated. Implement proper access controls.
IoT,Lack of Transport Encryption,Data is transmitted without encryption,High,CWE-319,Implement TLS for all communications. Use proper certificate validation. Keep cryptographic libraries updated.
IoT,Privacy Concerns,IoT devices collect excessive personal data,Medium,CWE-359,Collect only necessary data. Implement proper data protection. Provide clear privacy policies.
IoT,Insecure Cloud Interface,Cloud services for IoT devices are insecurely implemented,High,CWE-1059,Implement proper security controls for cloud interfaces. Use strong authentication. Encrypt all communications.
IoT,Insecure Mobile Interface,Mobile apps for IoT devices have security vulnerabilities,High,CWE-1059,Implement proper authentication and authorization. Secure all communications. Follow mobile security best practices.
IoT,Insufficient Security Configurability,IoT devices lack security configuration options,Medium,CWE-1059,Provide security configuration options. Implement secure defaults. Document security features.
IoT,Insecure Software/Firmware,Device software or firmware has vulnerabilities,High,CWE-1059,Implement secure update mechanisms. Sign all updates. Keep software updated.
IoT,Poor Physical Security,Devices are physically insecure allowing tampering,Medium,CWE-1059,Implement tamper resistance. Secure debug interfaces. Consider using secure elements for sensitive operations.
IoT,Insecure Default Settings,Devices use insecure default settings,High,CWE-1188,Implement secure default settings. Force configuration changes on first use. Regularly audit default settings.
IoT,Lack of Device Management,Devices lack proper management capabilities,Medium,CWE-1059,Implement device management features. Enable remote updates. Provide inventory and monitoring capabilities.
IoT,Insecure Update Mechanism,Device updates are not securely implemented,High,CWE-494,Sign all updates. Verify updates before installation. Use secure transport for updates.
IoT,Insufficient Privacy Protection,Devices don't properly protect user privacy,Medium,CWE-359,Minimize data collection. Implement proper data protection. Provide user control over data.
IoT,Lack of Secure Boot,Devices don't verify firmware integrity during boot,High,CWE-1191,Implement secure boot. Verify all code before execution. Use hardware security features when available.